#!/usr/bin/env python3

import os
import sys
import jinja2


def scan_images():
    """
    Scan a project for all the files and directories.
    """
    current_dir = os.getcwd()
    projects = {}

    # Scan the image_name is the directory in top level
    # The image_tag is the directory in the image_name directory
    for image_name in os.listdir(current_dir):
        if os.path.isdir(image_name):
            projects[image_name] = []
            for image_tag in os.listdir(image_name):
                check = os.path.join(image_name, image_tag, "Dockerfile")
                if os.path.isfile(check):
                    projects[image_name].append(image_tag)

    # Filter out the empty image_tags
    projects = {k: v for k, v in projects.items() if v}

    return projects


def get_template_workflows():
    """jinja2 template for Github workflows from string"""

    template = """# Generated by gen.py script
# Do not edit this file manually

name: Build and Push
on:
  push:
    branches:
      - master

  pull_request:
    branches:
      - master

{% raw %}
env:
  REGISTRY: ghcr.io
  REPO: ${{ github.repository }}
{% endraw %}

jobs:
{%- for image_name, image_tags in images.items() %}
  {{ image_name }}:
    name: Build {{ image_name }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        tags:
          {%- for image_tag in image_tags %}
          - {{ image_tag }}
          {%- endfor %}
    env:
      IMAGE_NAME: {{ image_name }}
      IMAGE_TAG: '{% raw %}${{ matrix.tags }}{% endraw %}'
    {%- raw %}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
             src:
              - '${{ env.IMAGE_NAME }}/${{ matrix.tags }}/**'
              - '.github/workflows/ci.yaml'

      - name: Log in to the Container registry
        if: steps.changes.outputs.src == 'true'
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        if: steps.changes.outputs.src == 'true'
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Extract metadata (tags, labels) for Docker
        if: steps.changes.outputs.src == 'true'
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.REPO }}
          tags: |
            type=raw,value=${{ matrix.tags }}
            type=raw,value=${{ matrix.tags }}-{{date 'YYYYMMDD'}}
            type=sha,format=short

      - name: Build and push
        if: steps.changes.outputs.src == 'true'
        id: docker_build
        uses: docker/build-push-action@v4
        with:
          context: ${{ github.workspace }}
          file: ./${{ env.IMAGE_NAME }}/${{ env.IMAGE_TAG }}/Dockerfile
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          push: ${{ github.event_name != 'pull_request' }}

      - name: Image digest
        if: steps.changes.outputs.src == 'true'
        run: echo ${{ steps.docker_build.outputs.digest }}
    {%- endraw %}
{% endfor -%}
    """

    return template


def get_template_readme():
    """jinja2 template for README.md from string"""

    template = """

{%- for image_name, image_tags in images.items() %}
- [`{{ image_name }}`](#{{ image_name }})
{%- for image_tag in image_tags %}
    - [`ghcr.io/duyet/docker-images:{{ image_tag }}`](#{{ (image_name + image_tag).lower().replace(" ", "").replace(".", "") }})
{%- endfor %}
{%- endfor %}

{% for image_name, image_tags in images.items() %}
## `{{ image_name }}`

{%- for image_tag in image_tags %}

### [`{{ image_name }}/{{ image_tag }}`]({{ image_name }}/{{ image_tag }}/Dockerfile)

Install from the command line

```bash
docker pull ghcr.io/duyet/docker-images:{{ image_tag }}
```

Use as base image in Dockerfile:

```Dockerfile
FROM ghcr.io/duyet/docker-images:{{ image_tag }}
```
{% endfor %}
{% endfor -%}
    """

    return template


def build_workflows(images):
    """Build the workflows yaml for the images."""

    # Get the jinja2 template
    template = jinja2.Template(get_template_workflows())

    # Build the workflows
    workflows = template.render(images=images)

    return workflows


def build_readme(images):
    """Build the README.md for the images."""

    # Get the jinja2 template
    template = jinja2.Template(get_template_readme())

    # Build the workflows
    return template.render(images=images)


if __name__ == "__main__":
    images = scan_images()
    workflows = build_workflows(images)

    # Dry run option
    if "--dry-run" in sys.argv:
        print(workflows)

    # Help option
    if "--help" in sys.argv or "-h" in sys.argv:
        print("Usage:\n  gen.py [--dry-run | --help]")
        sys.exit(0)

    # Write the workflows to the github workflows directory
    target = ".github/workflows/ci.yaml"
    with open(target, "w", encoding="utf-8") as f:
        f.write(workflows)
        print("Generated workflows to {}".format(target))

    # Generate the README.md
    # Replace content between <!-- BEGIN IMAGE LIST --> and <!-- END IMAGE LIST -->
    # with the list of images
    readme_content = build_readme(images)
    with open("README.md", "r", encoding="utf-8") as f:
        begin = "<!-- BEGIN IMAGE LIST -->"
        end = "<!-- END IMAGE LIST -->"
        content = f.read()
        start = content.find(begin)
        end = content.find(end)
        content = content[:start] + begin + readme_content + content[end:]

    with open("README.md", "w", encoding="utf-8") as f:
        f.write(content)
        print("Generated README.md")
